/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CLOSING_TIME, DEFAULT_TASK_ID, DEFAULT_CONFIG, UNKNOWN_TASK_ID, WAITING_FOR_OVERLAY_DISAPPEAR } from './ngx-ui-loader.contants';
import { NGX_UI_LOADER_CONFIG_TOKEN } from './ngx-ui-loader-config.token';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-ui-loader-config.token";
var NgxUiLoaderService = /** @class */ (function () {
    /**
     * Constructor
     * @param config
     */
    function NgxUiLoaderService(config) {
        this.config = config;
        this.defaultConfig = tslib_1.__assign({}, DEFAULT_CONFIG);
        if (this.config) {
            if (this.config.threshold && this.config.threshold <= 0) {
                this.config.threshold = DEFAULT_CONFIG.threshold;
            }
            this.defaultConfig = tslib_1.__assign({}, this.defaultConfig, this.config);
        }
        this.loaders = {};
        this.showForeground = new BehaviorSubject({ loaderId: '', isShow: false });
        this.showForeground$ = this.showForeground.asObservable();
        this.showBackground = new BehaviorSubject({ loaderId: '', isShow: false });
        this.showBackground$ = this.showBackground.asObservable();
        this.fgClosing = new BehaviorSubject({ loaderId: '', isShow: false });
        this.foregroundClosing$ = this.fgClosing.asObservable();
        this.bgClosing = new BehaviorSubject({ loaderId: '', isShow: false });
        this.backgroundClosing$ = this.bgClosing.asObservable();
        this.onStart = new Subject();
        this.onStart$ = this.onStart.asObservable();
        this.onStop = new Subject();
        this.onStop$ = this.onStop.asObservable();
    }
    /**
     * For internal use only. It may be changed in the future.
     * @docs-private
     */
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @return {?}
     */
    NgxUiLoaderService.prototype.initLoaderData = /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @return {?}
     */
    function (loaderId) {
        /** @type {?} */
        var isMaster = false;
        if (loaderId === this.defaultConfig.masterLoaderId) {
            this.throwErrorIfMasterLoaderExists(true);
            isMaster = true;
        }
        else { // not master loader
            this.throwErrorIfLoaderExists(loaderId, true);
        }
        if (this.loaders[loaderId]) {
            this.loaders[loaderId].isBound = true;
            this.loaders[loaderId].isMaster = isMaster;
            // emit showEvent after data loader is bound
            if (this.hasForeground(loaderId)) {
                this.showForeground.next({ loaderId: loaderId, isShow: true });
                this.onStart.next({ loaderId: loaderId, taskId: UNKNOWN_TASK_ID, isForeground: true });
            }
            else {
                if (this.hasBackground(loaderId)) {
                    this.showBackground.next({ loaderId: loaderId, isShow: true });
                    this.onStart.next({ loaderId: loaderId, taskId: UNKNOWN_TASK_ID, isForeground: false });
                }
            }
        }
        else {
            this.createLoaderData(loaderId, isMaster, true);
        }
    };
    /**
     * For internal use only. It may be changed in the future.
     * @docs-private
     */
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @param {?} newLoaderId
     * @return {?}
     */
    NgxUiLoaderService.prototype.updateLoaderId = /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @param {?} newLoaderId
     * @return {?}
     */
    function (loaderId, newLoaderId) {
        this.throwErrorIfLoaderNotExist(loaderId);
        if (this.loaders[loaderId].loaderId === this.defaultConfig.masterLoaderId) {
            console.warn("[ngx-ui-loader] - Cannot change loaderId of master loader. The current " +
                ("master's loaderId is \"" + this.defaultConfig.masterLoaderId + "\". If you really want to ") +
                "change it, please use NgxUiLoaderModule.forRoot() method.");
            return;
        }
        if (newLoaderId !== loaderId) {
            this.throwErrorIfLoaderExists(newLoaderId, true);
            this.loaders[newLoaderId] = {
                loaderId: newLoaderId,
                background: tslib_1.__assign({}, this.loaders[loaderId].background),
                foreground: tslib_1.__assign({}, this.loaders[loaderId].foreground),
                isMaster: false,
                isBound: this.loaders[loaderId].isBound
            };
            delete this.loaders[loaderId];
        }
    };
    /**
     * For internal use only. It may be changed in the future.
     * @docs-private
     */
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @return {?}
     */
    NgxUiLoaderService.prototype.destroyLoaderData = /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @param {?} loaderId
     * @return {?}
     */
    function (loaderId) {
        this.stopLoaderAll(loaderId);
        delete this.loaders[loaderId];
    };
    /**
     * Get default loader configuration
     * @returns default configuration object
     */
    /**
     * Get default loader configuration
     * @return {?} default configuration object
     */
    NgxUiLoaderService.prototype.getDefaultConfig = /**
     * Get default loader configuration
     * @return {?} default configuration object
     */
    function () {
        return tslib_1.__assign({}, this.defaultConfig);
    };
    /**
     * Get all the loaders
     */
    /**
     * Get all the loaders
     * @return {?}
     */
    NgxUiLoaderService.prototype.getLoaders = /**
     * Get all the loaders
     * @return {?}
     */
    function () {
        return JSON.parse(JSON.stringify(this.loaders));
    };
    /**
     * Get data of a specified loader. If loaderId is not provided, it will return data of master loader(if existed)
     */
    /**
     * Get data of a specified loader. If loaderId is not provided, it will return data of master loader(if existed)
     * @param {?=} loaderId
     * @return {?}
     */
    NgxUiLoaderService.prototype.getLoader = /**
     * Get data of a specified loader. If loaderId is not provided, it will return data of master loader(if existed)
     * @param {?=} loaderId
     * @return {?}
     */
    function (loaderId) {
        if (loaderId) {
            this.throwErrorIfLoaderNotExist(loaderId);
        }
        else {
            this.throwErrorIfMasterLoaderNotExist();
            loaderId = this.defaultConfig.masterLoaderId;
        }
        return JSON.parse(JSON.stringify(this.loaders[loaderId]));
    };
    /**
     * @deprecated use getLoader() or getLoaders() instead. This will be removed in the version 8.x.x
     * Return status of master loader
     */
    /**
     * @deprecated use getLoader() or getLoaders() instead. This will be removed in the version 8.x.x
     * Return status of master loader
     * @return {?}
     */
    NgxUiLoaderService.prototype.getStatus = /**
     * @deprecated use getLoader() or getLoaders() instead. This will be removed in the version 8.x.x
     * Return status of master loader
     * @return {?}
     */
    function () {
        this.throwErrorIfMasterLoaderNotExist();
        return {
            waitingBackground: this.loaders[this.defaultConfig.masterLoaderId].background,
            waitingForeground: this.loaders[this.defaultConfig.masterLoaderId].foreground
        };
    };
    /**
     * Check whether the queue has a waiting foreground loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting foreground loader.
     * @param loaderId the loader Id
     * @param taskId the optional task Id
     * @returns boolean
     */
    /**
     * Check whether the queue has a waiting foreground loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting foreground loader.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id
     * @return {?} boolean
     */
    NgxUiLoaderService.prototype.hasForeground = /**
     * Check whether the queue has a waiting foreground loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting foreground loader.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id
     * @return {?} boolean
     */
    function (loaderId, taskId) {
        if (this.loaders[loaderId]) {
            if (taskId) {
                return this.loaders[loaderId].foreground[taskId] ? true : false;
            }
            return Object.keys(this.loaders[loaderId].foreground).length > 0;
        }
        return false;
    };
    /**
     * Check whether the queue has a waiting background loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting background loader.
     * @param loaderId the loader Id
     * @param taskId the optional task Id
     * @returns boolean
     */
    /**
     * Check whether the queue has a waiting background loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting background loader.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id
     * @return {?} boolean
     */
    NgxUiLoaderService.prototype.hasBackground = /**
     * Check whether the queue has a waiting background loader with the given `taskId`.
     * If no `taskId` specified, it will check whether the queue has any waiting background loader.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id
     * @return {?} boolean
     */
    function (loaderId, taskId) {
        if (this.loaders[loaderId]) {
            if (taskId) {
                return this.loaders[loaderId].background[taskId] ? true : false;
            }
            return Object.keys(this.loaders[loaderId].background).length > 0;
        }
        return false;
    };
    /**
     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.
     * @param loaderId the loader Id
     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.
     */
    /**
     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    NgxUiLoaderService.prototype.startLoader = /**
     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    function (loaderId, taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.createLoaderData(loaderId, undefined, false);
        /** @type {?} */
        var foregroundRunning = this.hasForeground(loaderId);
        this.loaders[loaderId].foreground[taskId] = Date.now();
        if (!this.loaders[loaderId].isBound) {
            return;
        }
        if (!foregroundRunning) {
            if (this.hasBackground(loaderId)) {
                this.backgroundCloseout(loaderId);
                this.showBackground.next({ loaderId: loaderId, isShow: false });
            }
            this.showForeground.next({ loaderId: loaderId, isShow: true });
        }
        this.onStart.next({ loaderId: loaderId, taskId: taskId, isForeground: true });
    };
    /**
     * Start the foreground loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stop() method.
     * NOTE: Really this function just wraps startLoader() function
     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.
     */
    /**
     * Start the foreground loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stop() method.
     * NOTE: Really this function just wraps startLoader() function
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    NgxUiLoaderService.prototype.start = /**
     * Start the foreground loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stop() method.
     * NOTE: Really this function just wraps startLoader() function
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.startLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Start the background loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.
     * @param loaderId the loader Id
     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.
     */
    /**
     * Start the background loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    NgxUiLoaderService.prototype.startBackgroundLoader = /**
     * Start the background loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    function (loaderId, taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.createLoaderData(loaderId, undefined, false);
        this.loaders[loaderId].background[taskId] = Date.now();
        if (!this.loaders[loaderId].isBound) {
            return;
        }
        if (!this.hasForeground(loaderId)) {
            this.showBackground.next({ loaderId: loaderId, isShow: true });
        }
        this.onStart.next({ loaderId: loaderId, taskId: taskId, isForeground: false });
    };
    /**
     * Start the background loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.
     * NOTE: Really this function just wraps startBackgroundLoader() function
     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.
     */
    /**
     * Start the background loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.
     * NOTE: Really this function just wraps startBackgroundLoader() function
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    NgxUiLoaderService.prototype.startBackground = /**
     * Start the background loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.
     * NOTE: Really this function just wraps startBackgroundLoader() function
     * @param {?=} taskId the optional task Id of the loading. taskId is set to 'default' by default.
     * @return {?}
     */
    function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.startBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Stop a foreground loading of loader having `loaderId` with specific `taskId`
     * @param loaderId the loader Id
     * @param taskId the optional task Id to stop. If not provided, 'default' is used.
     * @returns Object
     */
    /**
     * Stop a foreground loading of loader having `loaderId` with specific `taskId`
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    NgxUiLoaderService.prototype.stopLoader = /**
     * Stop a foreground loading of loader having `loaderId` with specific `taskId`
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    function (loaderId, taskId) {
        var _this = this;
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.throwErrorIfLoaderNotExist(loaderId);
        // Update loader data {{{
        /** @type {?} */
        var now = Date.now();
        if (this.hasForeground(loaderId, taskId)) {
            if (this.loaders[loaderId].foreground[taskId] + this.defaultConfig.threshold > now) {
                setTimeout(function () {
                    _this.stopLoader(loaderId, taskId);
                }, this.loaders[loaderId].foreground[taskId] + this.defaultConfig.threshold - now);
                return;
            }
            delete this.loaders[loaderId].foreground[taskId];
        }
        else {
            return;
        }
        // }}}
        // Emit ShowEvents to update view {{{
        if (!this.hasForeground(loaderId)) {
            this.foregroundCloseout(loaderId);
            this.showForeground.next({ loaderId: loaderId, isShow: false });
            if (this.hasBackground(loaderId)) {
                setTimeout(function () {
                    if (_this.hasBackground(loaderId)) { // still have background tasks
                        _this.showBackground.next({ loaderId: loaderId, isShow: true });
                    }
                }, WAITING_FOR_OVERLAY_DISAPPEAR);
            }
        }
        this.onStop.next({ loaderId: loaderId, taskId: taskId, isForeground: true });
        // }}}
    };
    /**
     * Stop a foreground loading of master loader with specific `taskId`
     * @param taskId the optional task Id to stop. If not provided, 'default' is used.
     * @returns Object
     */
    /**
     * Stop a foreground loading of master loader with specific `taskId`
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    NgxUiLoaderService.prototype.stop = /**
     * Stop a foreground loading of master loader with specific `taskId`
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.stopLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Stop a background loading of loader having `loaderId` with specific `taskId`
     * @param loaderId the loader Id
     * @param taskId the optional task Id to stop. If not provided, 'default' is used.
     * @returns Object
     */
    /**
     * Stop a background loading of loader having `loaderId` with specific `taskId`
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    NgxUiLoaderService.prototype.stopBackgroundLoader = /**
     * Stop a background loading of loader having `loaderId` with specific `taskId`
     * @param {?} loaderId the loader Id
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    function (loaderId, taskId) {
        var _this = this;
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.throwErrorIfLoaderNotExist(loaderId);
        // Update loader data {{{
        /** @type {?} */
        var now = Date.now();
        if (this.hasBackground(loaderId, taskId)) {
            if (this.loaders[loaderId].background[taskId] + this.defaultConfig.threshold > now) {
                setTimeout(function () {
                    _this.stopBackgroundLoader(loaderId, taskId);
                }, this.loaders[loaderId].background[taskId] + this.defaultConfig.threshold - now);
                return;
            }
            delete this.loaders[loaderId].background[taskId];
        }
        else {
            return;
        }
        // }}}
        // Emit ShowEvents to update view {{{
        if (!this.hasForeground(loaderId) && !this.hasBackground(loaderId)) {
            this.backgroundCloseout(loaderId);
            this.showBackground.next({ loaderId: loaderId, isShow: false });
        }
        this.onStop.next({ loaderId: loaderId, taskId: taskId, isForeground: false });
        // }}}
    };
    /**
     * Stop a background loading of master loader with specific taskId
     * @param taskId the optional task Id to stop. If not provided, 'default' is used.
     * @returns Object
     */
    /**
     * Stop a background loading of master loader with specific taskId
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    NgxUiLoaderService.prototype.stopBackground = /**
     * Stop a background loading of master loader with specific taskId
     * @param {?=} taskId the optional task Id to stop. If not provided, 'default' is used.
     * @return {?} Object
     */
    function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_TASK_ID; }
        this.stopBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Stop all the background and foreground loadings of loader having `loaderId`
     * @param loaderId the loader Id
     */
    /**
     * Stop all the background and foreground loadings of loader having `loaderId`
     * @param {?} loaderId the loader Id
     * @return {?}
     */
    NgxUiLoaderService.prototype.stopLoaderAll = /**
     * Stop all the background and foreground loadings of loader having `loaderId`
     * @param {?} loaderId the loader Id
     * @return {?}
     */
    function (loaderId) {
        this.throwErrorIfLoaderNotExist(loaderId);
        if (this.hasForeground(loaderId)) {
            this.foregroundCloseout(loaderId);
            this.showForeground.next({ loaderId: loaderId, isShow: false });
        }
        else if (this.hasBackground(loaderId)) {
            this.backgroundCloseout(loaderId);
            this.showBackground.next({ loaderId: loaderId, isShow: false });
        }
        this.loaders[loaderId].foreground = {};
        this.loaders[loaderId].background = {};
    };
    /**
     * Stop all the background and foreground loadings of master loader
     */
    /**
     * Stop all the background and foreground loadings of master loader
     * @return {?}
     */
    NgxUiLoaderService.prototype.stopAll = /**
     * Stop all the background and foreground loadings of master loader
     * @return {?}
     */
    function () {
        this.stopLoaderAll(this.defaultConfig.masterLoaderId);
    };
    /**
     * Create loader data if it does not exist
     * @param loaderId
     * @param isMaster
     * @param isBound
     * @docs-private
     */
    /**
     * Create loader data if it does not exist
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @param {?} isMaster
     * @param {?} isBound
     * @return {?}
     */
    NgxUiLoaderService.prototype.createLoaderData = /**
     * Create loader data if it does not exist
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @param {?} isMaster
     * @param {?} isBound
     * @return {?}
     */
    function (loaderId, isMaster, isBound) {
        if (!this.loaders[loaderId]) {
            this.loaders[loaderId] = {
                loaderId: loaderId,
                foreground: {},
                background: {},
                isMaster: isMaster,
                isBound: isBound
            };
        }
    };
    /**
     * Throw error if the loaderId does not exist.
     * @docs-private
     */
    /**
     * Throw error if the loaderId does not exist.
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @return {?}
     */
    NgxUiLoaderService.prototype.throwErrorIfLoaderNotExist = /**
     * Throw error if the loaderId does not exist.
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @return {?}
     */
    function (loaderId) {
        if (!this.loaders[loaderId]) {
            throw new Error("[ngx-ui-loader] - loaderId \"" + loaderId + "\" does not exist.");
        }
    };
    /**
     * Throw error if the loaderId has already existed.
     * @docs-private
     */
    /**
     * Throw error if the loaderId has already existed.
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @param {?=} useIsBoundProp
     * @return {?}
     */
    NgxUiLoaderService.prototype.throwErrorIfLoaderExists = /**
     * Throw error if the loaderId has already existed.
     * \@docs-private
     * @private
     * @param {?} loaderId
     * @param {?=} useIsBoundProp
     * @return {?}
     */
    function (loaderId, useIsBoundProp) {
        if (this.loaders[loaderId] && (this.loaders[loaderId].isBound && useIsBoundProp)) {
            throw new Error("[ngx-ui-loader] - loaderId \"" + loaderId + "\" is duplicated. Please choose another one!");
        }
    };
    /**
     * Throw error if the master loader has already existed.
     * @docs-private
     */
    /**
     * Throw error if the master loader has already existed.
     * \@docs-private
     * @private
     * @param {?=} useIsBoundProp
     * @return {?}
     */
    NgxUiLoaderService.prototype.throwErrorIfMasterLoaderExists = /**
     * Throw error if the master loader has already existed.
     * \@docs-private
     * @private
     * @param {?=} useIsBoundProp
     * @return {?}
     */
    function (useIsBoundProp) {
        if (this.loaders[this.defaultConfig.masterLoaderId] && (this.loaders[this.defaultConfig.masterLoaderId].isBound && useIsBoundProp)) {
            throw new Error("[ngx-ui-loader] - The master loader has already existed. "
                + "The app should have only one master loader and it should be placed in the root app template");
        }
    };
    /**
     * Throw error if the master loader does not exist.
     * @docs-private
     */
    /**
     * Throw error if the master loader does not exist.
     * \@docs-private
     * @private
     * @return {?}
     */
    NgxUiLoaderService.prototype.throwErrorIfMasterLoaderNotExist = /**
     * Throw error if the master loader does not exist.
     * \@docs-private
     * @private
     * @return {?}
     */
    function () {
        if (!this.loaders[this.defaultConfig.masterLoaderId]) {
            throw new Error("[ngx-ui-loader] - The master loader does not exist.");
        }
    };
    /**
     * Manage to close foreground loading
     * @param loaderId the loader id
     */
    /**
     * Manage to close foreground loading
     * @private
     * @param {?} loaderId the loader id
     * @return {?}
     */
    NgxUiLoaderService.prototype.foregroundCloseout = /**
     * Manage to close foreground loading
     * @private
     * @param {?} loaderId the loader id
     * @return {?}
     */
    function (loaderId) {
        var _this = this;
        this.fgClosing.next({ loaderId: loaderId, isShow: true });
        setTimeout(function () {
            _this.fgClosing.next({ loaderId: loaderId, isShow: false });
        }, CLOSING_TIME);
    };
    /**
     * Manage to close background loading
     * @param loaderId the loader id
     */
    /**
     * Manage to close background loading
     * @private
     * @param {?} loaderId the loader id
     * @return {?}
     */
    NgxUiLoaderService.prototype.backgroundCloseout = /**
     * Manage to close background loading
     * @private
     * @param {?} loaderId the loader id
     * @return {?}
     */
    function (loaderId) {
        var _this = this;
        this.bgClosing.next({ loaderId: loaderId, isShow: true });
        setTimeout(function () {
            _this.bgClosing.next({ loaderId: loaderId, isShow: false });
        }, CLOSING_TIME);
    };
    NgxUiLoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxUiLoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_CONFIG_TOKEN,] }] }
    ]; };
    /** @nocollapse */ NgxUiLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function NgxUiLoaderService_Factory() { return new NgxUiLoaderService(i0.inject(i1.NGX_UI_LOADER_CONFIG_TOKEN, 8)); }, token: NgxUiLoaderService, providedIn: "root" });
    return NgxUiLoaderService;
}());
export { NgxUiLoaderService };
if (false) {
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.backgroundClosing$;
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.foregroundClosing$;
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.onStart$;
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.onStop$;
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.showBackground$;
    /**
     * For internal use only. It may be changed in the future.
     * \@docs-private
     * @type {?}
     */
    NgxUiLoaderService.prototype.showForeground$;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.bgClosing;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.fgClosing;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.loaders;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.onStart;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.onStop;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.showBackground;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.showForeground;
    /**
     * @type {?}
     * @private
     */
    NgxUiLoaderService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,